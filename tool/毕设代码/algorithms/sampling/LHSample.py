# coding=utf-8
# 2019/10/15
import sys
sys.path.append('../../')

import numpy as np
from matplotlib.ticker import MultipleLocator, FuncFormatter
import pickle
from util import io
import random

def LHSample(D, bounds, N):
    '''超拉丁立方抽样
    步骤：
    1. 将[0, 1]分为 n 等份，每个小区间内[i/n, (i+1)/n]内根据均匀分布随机产生一个数
    2. 将这 n 个随机数的顺序打乱
    3. 这 n 各数即为每个随机样本的概率，按照概率分布函数的反函数生成随机分布的值

    @param D 参数个数
    @param bounds 参数对应范围（list）
    @param N 拉丁超立方层数
    @return 样本数据
    '''
    result = np.empty([N, D])
    tmp = np.empty([N])
    d = 1.0 / N

    for i in range(D):
        for j in range(N):
            tmp[j] = np.random.uniform(low=j * d, high=(j + 1) * d, size=1)[0]
        np.random.shuffle(tmp)
        for j in range(N):
            result[j, i] = tmp[j]
    # 对样本数据进行拉伸
    b = np.array(bounds)
    lowerBounds = b[:,0]
    upperBounds = b[:,1]
    if np.any(lowerBounds > upperBounds):
        print('范围出错')
        return None

    np.add(np.multiply(result, (upperBounds - lowerBounds), out=result),
           lowerBounds,
           out=result)

    return result

if __name__ =='__main__':
    D = 3
    N = 30
    bounds = [
                [0, 100],       # side
                [-200, 200],    # front 
                [-300, 100],    # bottom
             ]
    dataSavePath = "../../data/samples-data.data"
    samples = LHSample(D,bounds,N)
    XY = np.array(samples)
    io.saveData(XY, dataSavePath)

    labelsFilePath = "../../data/samples-data-labels.data"
    Y = np.array([random.random() for x in range(N)])
    io.saveData(Y, labelsFilePath)

    print("X: {}, Y:{}".format(XY, Y))

"""
X: [[ 6.31954246e+01  1.16578449e+02  6.98894843e+01]
 [ 8.96001652e+00  1.41215285e+02 -1.12979424e+02]
 [ 7.56421979e+01  1.03431322e+02  4.41317015e+01]
 [ 9.09808083e+01  7.79844485e+01 -2.73052881e+02]
 [ 9.47943781e+01 -1.97866533e+02 -1.70865126e+02]
 [ 5.38311535e+01 -3.54532890e+00 -1.84232292e+02]
 [ 6.42194047e+01 -1.52638292e+02  9.15704278e+01]
 [ 7.87060818e+01 -9.34009118e+01 -1.52100043e+02]
 [ 8.93757537e+01  5.41237730e+01 -1.96527505e+00]
 [ 9.81984501e+01 -1.52191871e+01  5.97763387e+01]
 [ 3.13582137e+01  4.59956256e+00 -2.55640400e+02]
 [ 8.14820849e+01 -5.89837955e+01  2.27786406e+01]
 [ 1.42010773e+01  3.46486834e+01 -8.74078267e+01]
 [ 8.58754111e+01 -1.76506074e+02 -1.35603768e+02]
 [ 3.62540432e+01  4.65869013e+01 -5.54268630e+01]
 [ 4.56887366e+01  8.10900244e+01 -2.16366559e+02]
 [ 2.36450057e+01  1.96170486e+02 -2.81379069e+01]
 [ 5.23303370e+01  1.78331295e+01 -7.03501181e+01]
 [ 1.85819214e+01 -1.70765243e+02 -1.53894253e+02]
 [ 2.10091917e+01  1.76286870e+02 -1.21113996e+02]
 [ 7.08316729e+01 -1.36524434e+02 -1.92913528e+01]
 [ 5.74510103e+01  1.32648093e+02  9.25253744e+00]
 [ 4.32312147e+01 -4.36682003e+01 -8.01343074e+01]
 [ 1.22739267e+01 -7.59996137e+01 -2.04153796e+02]
 [ 6.06552535e+00  1.57077379e+02 -2.96061623e+02]
 [ 4.85782613e+01  1.68710611e+02 -2.21810497e+02]
 [ 2.62012064e-01 -3.40848851e+01 -2.36076612e+02]
 [ 3.86032482e+01 -8.16276467e+01 -2.86329949e+02]
 [ 2.92425400e+01 -1.14661849e+02  8.20203097e+01]
 [ 6.99466506e+01 -1.26896483e+02 -3.70844443e+01]], Y:[0.50925514 0.17782516 0.82509188 0.95322172 0.83216267 0.99350062
 0.42714707 0.10876055 0.83781616 0.90599134 0.4253123  0.22925337
 0.56768906 0.55039681 0.69784389 0.52392474 0.91460863 0.15153971
 0.09431052 0.44812747 0.22506916 0.45367312 0.28205215 0.03123745
 0.87696617 0.30207596 0.47195962 0.16444034 0.3944925  0.31496766]
 """